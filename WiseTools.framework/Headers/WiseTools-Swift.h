// Generated by Apple Swift version 4.2.1 effective-3.4.1 (swiftlang-1000.11.42 clang-1000.11.45.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import CoreBluetooth;
@import CoreLocation;
@import Darwin;
@import Foundation;
@import LocalAuthentication;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="WiseTools",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC9WiseTools13ServiceObject")
@interface ServiceObject : NSObject
/// ///////////////////////////////////////////////////////////////////////////////////////////////
/// \code
///  initializer
///
/// \endcode
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
///
/// returns:
/// true if instance is released, false otherwise
- (BOOL)isReleased SWIFT_WARN_UNUSED_RESULT;
/// destroy instance and release it’s resources
/// \param creator _: object that was getting the instance.
///
- (void)release:(id _Nonnull)creator_;
@end


SWIFT_CLASS("_TtC9WiseTools18AuthenticationTool")
@interface AuthenticationTool : ServiceObject
/// ///////////////////////////////////////////////////////////////////////////////////////////////
/// \code
///  initializer.
///  - Since: iOS 7.0
///
/// \endcode
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// retrieve single instance if built, or nil if the instance was not built.
///
/// returns:
/// single instance.
+ (AuthenticationTool * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// true if authentication succeeded, false otherwise.
- (BOOL)isAuthenticated SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// true if authentication is available, false otherwise.
- (BOOL)isAuthenticationAvailable SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// supported biometric type.
- (LABiometryType)getBiometricType SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=11.0);
/// set fallback button customized title
/// \param title _: fallback button title.
///
- (void)setFallbackTitle:(NSString * _Nonnull)title_;
/// start authentication process.
/// \param reason _: reason for authentication to display in system dialog.
///
- (void)startAuthentication:(NSString * _Nonnull)reason_;
/// destroy instance and release it’s resources.
/// \param creator _: object that was getting the instance.
///
- (void)release:(id _Nonnull)creator_;
@end

@class CBCentralManager;
@class CBPeripheral;
@class NSNumber;

SWIFT_CLASS("_TtC9WiseTools10BleScanner")
@interface BleScanner : ServiceObject <CBCentralManagerDelegate>
///
/// returns:
/// true if Bluetooth adapter is enabled, false otherwise.
- (BOOL)isAdapterEnabled SWIFT_WARN_UNUSED_RESULT;
/// start discovery process.
- (void)startDiscovery;
/// stop discovery process.
- (void)stopDiscovery;
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDiscoverPeripheral:(CBPeripheral * _Nonnull)peripheral advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI;
/// destroy instance and release it’s resources
/// \param creator _: object that was getting the instance.
///
- (void)release:(id _Nonnull)creator_;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC9WiseTools12DatabaseTool")
@interface DatabaseTool : ServiceObject
/// ///////////////////////////////////////////////////////////////////////////////////////////////
/// \code
///  initializer.
///
/// \endcode
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// retrieve single instance if built, or nil if the instance was not built.
///
/// returns:
/// single instance.
+ (DatabaseTool * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
/// destroy instance and release it’s resources.
/// \param creator _: object that was getting the instance.
///
- (void)release:(id _Nonnull)creator_;
@end


SWIFT_CLASS("_TtC9WiseTools6Entity")
@interface Entity : NSObject
/// ///////////////////////////////////////////////////////////////////////////////////////////////
/// entity type *
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TYPE;)
+ (NSString * _Nonnull)TYPE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_KEY;)
+ (NSString * _Nonnull)MAP_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MAP_VALUE;)
+ (NSString * _Nonnull)MAP_VALUE SWIFT_WARN_UNUSED_RESULT;
/// ///////////////////////////////////////////////////////////////////////////////////////////////
/// \code
///  initializer.
///
/// \endcode
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
///
/// returns:
/// byte array after serialization.
- (NSData * _Nullable)toBytes SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// JSON string after serialization or nil.
- (NSString * _Nullable)toString SWIFT_WARN_UNUSED_RESULT;
/// abstract method to serialize to Binary, all sub-classes must override it. Do not invoke it.
///
/// returns:
/// serialized byte array.
- (NSData * _Nonnull)buildBinary SWIFT_WARN_UNUSED_RESULT;
@end

@class CLRegion;
@class CLLocationManager;
@class CLBeaconRegion;
@class CLBeacon;

SWIFT_CLASS("_TtC9WiseTools11IBeaconTool")
@interface IBeaconTool : ServiceObject <CLLocationManagerDelegate>
/// ///////////////////////////////////////////////////////////////////////////////////////////////
/// \code
///  initializer.
///
/// \endcode
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// retrieve single instance if built, or nil if the instance was not built.
///
/// returns:
/// single instance.
+ (IBeaconTool * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
- (CLRegion * _Nullable)getCrossedRegion SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// true if location service is enabled, false otherwise.
- (BOOL)isLocationServiceAvailable SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// true if the device supports monitoring for the specified type of region
- (BOOL)isMonitoringAvailable SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// true if permission ‘authorizedAlways’ or ‘authorizedWhenInUse’ granted, false otherwise.
- (BOOL)isAuthorizationStatusGranted SWIFT_WARN_UNUSED_RESULT;
/// set region for monitoring.
/// \param uuid _: region UUID
///
/// \param name _: region name
///
///
/// returns:
/// true if region created properly, otherwise false.
- (BOOL)setRegionWithUuid_:(NSString * _Nonnull)uuid_ name_:(NSString * _Nonnull)name_ SWIFT_WARN_UNUSED_RESULT;
/// start monitoring for region.
- (void)startMonitoring;
/// stop monitoring for region.
- (void)stopMonitoring;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didFailWithError:(NSError * _Nonnull)error;
- (void)locationManagerDidPauseLocationUpdates:(CLLocationManager * _Nonnull)manager;
- (void)locationManagerDidResumeLocationUpdates:(CLLocationManager * _Nonnull)manager;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didStartMonitoringForRegion:(CLRegion * _Nonnull)region;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didDetermineState:(CLRegionState)state forRegion:(CLRegion * _Nonnull)region;
- (void)locationManager:(CLLocationManager * _Nonnull)manager rangingBeaconsDidFailForRegion:(CLBeaconRegion * _Nonnull)region withError:(NSError * _Nonnull)error;
- (void)locationManager:(CLLocationManager * _Nonnull)manager monitoringDidFailForRegion:(CLRegion * _Nullable)region withError:(NSError * _Nonnull)error;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didRangeBeacons:(NSArray<CLBeacon *> * _Nonnull)beacons inRegion:(CLBeaconRegion * _Nonnull)region;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didEnterRegion:(CLRegion * _Nonnull)region;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didExitRegion:(CLRegion * _Nonnull)region;
/// destroy instance and release it’s resources.
/// \param creator _: object that was getting the instance.
///
- (void)release:(id _Nonnull)creator_;
@end


SWIFT_CLASS("_TtC9WiseTools14KeyChainHelper")
@interface KeyChainHelper : ServiceObject
/// Specify an access group that will be used to access keychain items. Access groups can be used to share keychain items between applications. When access group value is nil all application access groups are being accessed. Access group name is used by all functions: set, get, delete and clear.
@property (nonatomic, copy) NSString * _Nullable accessGroup;
/// Specifies whether the items can be synchronized with other devices through iCloud. Setting this property to true will
/// add the item to other devices with the <code>set</code> method and obtain synchronizable items with the <code>get</code> command. Deleting synchronizable items will remove them from all devices. In order for keychain synchronization to work the user must enable “Keychain” in iCloud settings.
/// Does not work on macOS.
@property (nonatomic) BOOL synchronizable;
/// ///////////////////////////////////////////////////////////////////////////////////////////////
/// \code
///  initializer.
///
/// \endcode
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// retrieve single instance if built, or nil if the instance was not built.
///
/// returns:
/// single instance.
+ (KeyChainHelper * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// last operation result type.
- (OSStatus)getLastResult SWIFT_WARN_UNUSED_RESULT;
/// retrieves the text value from the keychain that corresponds to the given key.
/// \param key The key that is used to read the keychain item.
///
///
/// returns:
/// the text value from the keychain or nil if unable to read the item.
- (NSString * _Nullable)getString:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// retrieves the data from the keychain that corresponds to the given key.
/// \param key The key that is used to read the keychain item.
///
///
/// returns:
/// the text value from the keychain or nil if unable to read the item.
- (NSData * _Nullable)getData:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// deletes the single keychain item specified by the key.
/// \param key The key that is used to delete the keychain item.
///
///
/// returns:
/// true if the item was successfully deleted.
- (BOOL)delete:(NSString * _Nonnull)key;
///
/// returns:
/// true if the keychain items were successfully deleted.
- (BOOL)clear;
/// destroy instance and release it’s resources.
/// \param creator _: object that was getting the instance.
///
- (void)release:(id _Nonnull)creator_;
@end

@class CLLocation;

SWIFT_CLASS("_TtC9WiseTools12LocationTool")
@interface LocationTool : ServiceObject <CLLocationManagerDelegate>
/// ///////////////////////////////////////////////////////////////////////////////////////////////
/// \code
///  initializer.
///  - Since: iOS 2.0
///
/// \endcode
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// retrieve single instance if built, or nil if the instance was not built.
///
/// returns:
/// single instance.
+ (LocationTool * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// true if location service is enabled, false otherwise.
- (BOOL)isLocationServiceAvailable SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// true if permission ‘authorizedAlways’ or ‘authorizedWhenInUse’ granted, false otherwise.
- (BOOL)isAuthorizationStatusGranted SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// the last location received. Will be nil until a location has been received.
- (CLLocation * _Nullable)getLastLocation SWIFT_WARN_UNUSED_RESULT;
/// enable background mode.
- (void)enableBackgroundMode;
/// start updating geo location.
- (void)startLocationUpdating;
/// stop updating geo location.
- (void)stopLocationUpdating;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didFailWithError:(NSError * _Nonnull)error;
- (void)locationManagerDidPauseLocationUpdates:(CLLocationManager * _Nonnull)manager;
- (void)locationManagerDidResumeLocationUpdates:(CLLocationManager * _Nonnull)manager;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
/// destroy instance and release it’s resources.
/// \param creator _: object that was getting the instance.
///
- (void)release:(id _Nonnull)creator_;
@end

@class NSURLSession;
@class NSURLAuthenticationChallenge;
@class NSURLCredential;

SWIFT_CLASS("_TtC9WiseTools11NetworkTool")
@interface NetworkTool : ServiceObject <NSURLSessionDelegate>
/// ///////////////////////////////////////////////////////////////////////////////////////////////
/// \code
///  initializer.
///
/// \endcode
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// retrieve single instance if built, or nil if the instance was not built.
///
/// returns:
/// single instance.
+ (NetworkTool * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// last network response.
- (NSData * _Nullable)getLastResponse SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// URL of last communication operation.
- (NSString * _Nonnull)getLastUrl SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// tag of last communication operation.
- (NSString * _Nonnull)getLastTag SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// HTTP headers of last communication operation.
- (NSDictionary * _Nullable)getLastHeaders SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// last URL error code or -1.
- (NSInteger)getLastErrorCode SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// last network communication elapsed time.
- (uint64_t)getLastElapsedTime SWIFT_WARN_UNUSED_RESULT;
/// set credentials for client certificate authentication.
/// \param certificate _: client certificate in Base64 format.
///
/// \param password _: client certificate password.
///
- (void)setAuthCredentialsWithCertificate_:(NSString * _Nonnull)certificate_ password_:(NSString * _Nonnull)password_;
/// cancel sending data request.
/// \param tag _: tag to cancel.
///
- (void)cancedRequest:(NSString * _Nonnull)tag_;
/// cancel sending data request for all requests.
- (void)cancelAllRequests;
- (void)URLSession:(NSURLSession * _Nonnull)session didBecomeInvalidWithError:(NSError * _Nullable)error;
- (void)URLSession:(NSURLSession * _Nonnull)session didReceiveChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
- (void)URLSessionDidFinishEventsForBackgroundURLSession:(NSURLSession * _Nonnull)session;
/// destroy instance and release it’s resources.
/// \param creator _: object that was getting the instance.
///
- (void)release:(id _Nonnull)creator_;
@end


SWIFT_CLASS("_TtC9WiseTools16ReachabilityTool")
@interface ReachabilityTool : ServiceObject
/// ///////////////////////////////////////////////////////////////////////////////////////////////
/// \code
///  initializer.
///
/// \endcode
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// retrieve single instance if built, or nil if the instance was not built.
///
/// returns:
/// single instance.
+ (ReachabilityTool * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
/// start monitoring network connectivity.
- (BOOL)startMonitoring;
/// stop monitoring network connectivity.
- (BOOL)stopMonitoring;
///
/// returns:
/// true if phone is connected to Internet, false otheriwse.
- (BOOL)isConnected SWIFT_WARN_UNUSED_RESULT;
/// destroy instance and release it’s resources.
/// \param creator _: object that was getting the instance.
///
- (void)release:(id _Nonnull)creator_;
@end


SWIFT_CLASS("_TtC9WiseTools11SensorsTool")
@interface SensorsTool : ServiceObject
///
/// returns:
/// last measured sensor vector.
- (NSArray<NSNumber *> * _Nonnull)getLastVector SWIFT_WARN_UNUSED_RESULT;
/// set sensor interval updates.
/// \param interval _: interval in milliseconds.
///
- (void)setUpdateInterval:(NSInteger)interval_;
/// starts updates for sensor.
- (void)startUpdates;
/// stops updates for sensor.
- (void)stopUpdates;
/// destroy instance and release it’s resources
/// \param creator _: object that was getting the instance.
///
- (void)release:(id _Nonnull)creator_;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class NSCoder;

SWIFT_CLASS("_TtC9WiseTools12Serializable")
@interface Serializable : NSObject <NSCoding>
/// ///////////////////////////////////////////////////////////////////////////////////////////////
/// tag represents the instance. Have to be valid filename. *
@property (nonatomic, copy) NSString * _Null_unspecified tag;
/// ///////////////////////////////////////////////////////////////////////////////////////////////
/// \code
///  initializer.
///  - parameters:
///     - tag_: unique tag of the state. Have to be valid filename.
///
/// \endcode
- (nonnull instancetype)initWithTag_:(NSString * _Nonnull)tag_ OBJC_DESIGNATED_INITIALIZER;
/// read previous instance state.
///
/// returns:
/// true if state exists, false otherwise.
- (BOOL)readState;
/// save current state.
///
/// returns:
/// true if state was saved successfully, false otherwise.
- (BOOL)saveState;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC9WiseTools9Singleton")
@interface Singleton : ServiceObject
/// ///////////////////////////////////////////////////////////////////////////////////////////////
/// \code
///  initializer.
///
/// \endcode
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// retrieve single instance if built, or nil if the instance was not built.
///
/// returns:
/// single instance.
+ (Singleton * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
/// destroy instance and release it’s resources.
/// \param creator _: object that was getting the instance.
///
- (void)release:(id _Nonnull)creator_;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
